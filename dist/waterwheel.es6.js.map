{"version":3,"file":"waterwheel.es6.js","sources":["../lib/helpers/base.js","../lib/helpers/methods.js","../lib/helpers/request.js","../lib/entity.js","../lib/jsonapi.js","../lib/swagger.js","../lib/helpers/oauth.js","../lib/waterwheel.js"],"sourcesContent":["class Base {\n  /**\n   * Create an instance of the Base class.\n   * @param {object} options\n   *   The configuration used to create a new instance of Waterwheel.\n   * @param {string} options.base\n   *   The base URL.\n   */\n  constructor(options) {\n    this.options = Object.assign({\n      timeout: 500,\n      accessCheck: true,\n      validation: true\n    }, options);\n  }\n  /**\n   * Set the base url.\n   * @param {string} base\n   *   The base url.\n   */\n  setBase(base) {\n    this.options.base = base;\n  }\n\n  /**\n   * Get the base url.\n   * @return {string}\n   *   The base url.\n   */\n  getBase() {\n    return this.options.base;\n  }\n\n}\n\nexport default Base;\n","// Store the HTTP methods here.\nexport default {\n  get: 'get',\n  patch: 'patch',\n  post: 'post',\n  delete: 'delete'\n};\n","import Base from './base';\nimport methods from './methods';\n\nclass Request extends Base {\n  /**\n   * Create an instance of the Request class.\n   * @param {object} options\n   *   The configuration used to create a new instance of Waterwheel.\n   * @param {string} options.base\n   *   The base URL.\n   * @param {object} oauth\n   *   The OAuth options.\n   */\n  constructor(options, oauth) {\n    super(options);\n    this.oauth = oauth;\n    this.axios = require('axios');\n  }\n\n  /**\n   * Issue a generic XMLHttpRequest.\n   * @param {string} method\n   *  The HTTP method to be used in the request.\n   * @param {string} url\n   *  The URL against which to issue the request.\n   * @param {string} XCSRFToken\n   *  An X-CSRF-Token from Drupals REST API.\n   * @param {object} additionalHeaders\n   *  An object containing additional request header key-value pairs.\n   * @param {object} body\n   *  An object containing the request body to be sent.\n   * @param {string} baseOverride\n   *   Override the base URL in special scenarios.\n   * @returns {Promise}\n   *  A Promise that when fulfilled returns a response from the request.\n   */\n  issueRequest(method, url, XCSRFToken, additionalHeaders, body, baseOverride) {\n    return (this.options.accessCheck && this.options.validation ?\n      this.oauth.getToken() :\n      Promise.resolve()\n    )\n    .then(() => {\n      const options = {\n        method: method,\n        timeout: this.options.timeout,\n        url: `${baseOverride || this.options.base}/${url.charAt(0) === '/' ? url.slice(1) : url}`,\n        headers: {\n          'X-CSRF-Token': XCSRFToken\n        }\n      };\n\n      if (this.options.accessCheck && this.options.validation) {\n        options.headers.Authorization = `Bearer ${this.oauth.tokenInformation.access_token}`;\n      }\n\n      // If this is a GET request,\n      // or we didn't pass a token drop the X-CSRF-Token header.\n      if (method === methods.get || !XCSRFToken) {\n        delete options.headers['X-CSRF-Token'];\n      }\n\n      // If we have additionalHeaders, set them.\n      // @TODO: This is NOT the safest way, so be careful.\n      if (additionalHeaders && Object.keys(additionalHeaders).length !== 0) {\n        Object.keys(additionalHeaders).forEach(key => {\n          options.headers[key] = additionalHeaders[key];\n        });\n      }\n\n      if (body) {\n        options.data = body;\n      }\n\n      return this.axios(options)\n        .then(res => Promise.resolve(res.data))\n        .catch(err => {\n          const error = new Error();\n          if (err.message && err.message.indexOf('timeout') !== -1) {\n            error.message = 'Timeout';\n            error.status = 408;\n          }\n          else {\n            error.message = err.response ? err.response.data.message : 'Unknown error.';\n            error.status = err.response ? err.response.status : 500;\n          }\n\n          return Promise.reject(error);\n        });\n    });\n  }\n  /**\n   * Get an X-CSRF-Token from Drupal's REST module.\n   * @return {Promise}\n   *  A Promise that when fulfilled returns a response containing the X-CSRF-Token.\n   */\n  getXCSRFToken() {\n    if (this.csrfToken) {\n      return Promise.resolve(this.csrfToken);\n    }\n    return new Promise((resolve, reject) => {\n      this.axios({method: 'get', url: `${this.options.base}/rest/session/token`})\n        .then(res => {\n          this.csrfToken = res.data;\n          return resolve(res.data);\n        })\n        .catch(err => reject(err));\n    });\n  }\n}\n\nexport default Request;\n","import methods from './helpers/methods';\n\nclass Entity {\n  /**\n   * Construct a new Entity\n   * @param {object} options\n   *   The configuration used to create this entity.\n   * @param {string} options.base\n   *   The base URL\n   * @param {object} options.methods\n   *   The paths representing each CRUD action.\n   * @param {string} options.methods.get\n   *   GET Action\n   * @param {string} options.methods.patch\n   *   PATCH Action\n   * @param {string} options.methods.post\n   *   POST Action\n   * @param {string} options.methods.delete\n   *   DELETE Action\n   * @param {string} options.more\n   *   A path partial repreenting the location of field data about the expected bundle.\n   * @param {number} [options.timeout=500]\n   *   How long Axios should wait before canceling a request.\n   * @param {string} options.bundle\n   *   The bundle that this entity is included in.\n   * @param {string} options.entity\n   *   The name of the actual entity.\n   * @param {object} options.metadata\n   *   An object with field-level meta data.\n   * @param {array} options.metadata.requiredFields\n   *   An array of field names required when creating an entity.\n   * @param {object} options.metadata.properties\n   *   An object describing all the fields on a bundle and their properties.\n   * @param {object} request\n   *   A shared requestor class instance.\n   */\n  constructor(options, request) {\n    this.options = options;\n    this.request = request;\n  }\n\n  /**\n   * Get a content entity in Drupal through REST (GET).\n   * @param {number|string} identifier\n   *   The ID of name of the entity being requested.\n   * @param {string} [format=json]\n   *   The format for the requested content.\n   * @returns {Promise}\n   *   A Promise that when fulfilled returns a response containing the content entity.\n   * @TODO: Add fields argument for selectivity: entityType, entityId, format, fields, base, creds\n   */\n  get(identifier, format = 'json') {\n    return !this.options.methods.hasOwnProperty(methods.get) ?\n      Promise.reject(`The method, ${methods.get}, is not available.`) :\n      this.request.issueRequest(methods.get, `${this.options.methods.get.path.replace(this.options.methods.get.path.match(/\\{.*?\\}/), identifier)}?_format=${format}`, '');\n  }\n\n  /**\n   * Update or set a content entity in Drupal through REST (PATCH).\n   * @param {number|string} identifier\n   *   The ID of name of the entity being requested.\n   * @param {object} body\n   *   An object containing the request body to be sent.\n   * @param {string} [format=application/json]\n   *   The format for the requested content.\n   * @returns {Promise} A Promise that when fulfilled returns a response containing the content entity in JSON (as of 8.2).\n   */\n  patch(identifier, body = {}, format = 'application/json') {\n    return !this.options.methods.hasOwnProperty(methods.patch) ?\n      Promise.reject(`The method, ${methods.patch}, is not available.`) :\n      this.request.getXCSRFToken()\n        .then((csrfToken) => this.request.issueRequest(methods.patch, `${this.options.methods.patch.path.replace(this.options.methods.patch.path.match(/\\{.*?\\}/), identifier)}`, csrfToken, {'Content-Type': format}, body));\n  }\n\n  /**\n   * Create a content entity in Drupal through REST (POST).\n   * @param {object} body\n   *   An object containing the request body to be sent.\n   * @param {string} [format=application/json]\n   *   The format of the content being posted.\n   * @param {bool} skipFieldValidation\n   *   A shortcut to skip field validation.\n   * @returns {Promise}\n   *   A Promise that when fulfilled returns a response containing the content entity in JSON (as of 8.2).\n   */\n  post(body, format = 'application/json', skipFieldValidation) {\n    if (!this.options.methods.hasOwnProperty(methods.post)) {\n      return Promise.reject(`The method, ${methods.post}, is not available.`);\n    }\n    if (skipFieldValidation) {\n      // Check to see if the required fields match the passed fields.\n      const checkedFields = this.checkRequiredFields(body);\n      if (checkedFields.length) {\n        return Promise.reject(`The following fields, ${checkedFields.join(', ')}, are required.`);\n      }\n    }\n\n    return this.request.getXCSRFToken()\n      .then((csrfToken) => this.request.issueRequest(methods.post, this.options.methods.post.path, csrfToken, {'Content-Type': format}, body));\n  }\n\n  /**\n   * Delete a content entity in Drupal through REST (DELETE).\n   * @param {number|string} identifier\n   *   The ID of name of the entity being requested.\n   * @returns {Promise}\n   *   A Promise that when fulfilled returns a response containing the content entity in JSON (as of 8.2).\n   */\n  delete(identifier) {\n    return !this.options.methods.hasOwnProperty(methods.delete) ?\n      Promise.reject(`The method, ${methods.delete}, is not available.`) :\n      this.request.getXCSRFToken()\n        .then((csrfToken) => this.request.issueRequest(methods.delete, `${this.options.methods.delete.path.replace(this.options.methods.delete.path.match(/\\{.*?\\}/), identifier)}`, csrfToken));\n  }\n\n  /**\n   * Checks to see if the required fields are present when submitting a POST request.\n   * @param {object} body\n   *   The post body data.\n   * @returns {array}\n   *   An array of keys.\n   */\n  checkRequiredFields(body) {\n    const availableBodyKeys = Object.keys(body);\n    return this.options.metadata.requiredFields.filter(key => !availableBodyKeys.includes(key));\n  }\n\n  /**\n   * Set a field on a specific entity\n   * @param  {string|number} identifier\n   *   The entity we are setting the field on.\n   * @param  {object[]|object} fields\n   *   The field name we are setting the data on.\n   * @param  {object} additionalValues\n   *   Any additional values to be appended to the post body.\n   * @return  {Promise}\n   *   The resolved promise.\n   */\n  setFields(identifier, fields) {\n    const availableFieldKeys = Object.keys(this.options.metadata.properties);\n    const nonMatchedFields = Object.keys(fields)\n      .map(fieldKey => {\n        if (!availableFieldKeys.includes(fieldKey)) {\n          return fieldKey;\n        }\n        return false;\n      }).filter(Boolean);\n\n    if (nonMatchedFields.length){\n      return Promise.reject(new Error(`The ${nonMatchedFields.length > 1 ? 'fields' : 'field'}, ${nonMatchedFields.join(', ')}, ${nonMatchedFields.length > 1 ? 'are' : 'is'} not included within the bundle, ${this.options.bundle}.`));\n    }\n    let postBody = {};\n\n    Object.keys(fields).forEach(fieldNameToSet => {\n      const fieldSpec = this.options.metadata.properties[fieldNameToSet];\n\n      // This assumes we are always going to be wrapping the response in an array.\n      postBody[fieldNameToSet] = [];\n\n      const fieldValueWrapper = {};\n      Object.keys(fieldSpec.items.properties).forEach(prop => {\n        if (fields[fieldNameToSet].hasOwnProperty(prop)){\n          fieldValueWrapper[prop] = fields[fieldNameToSet][prop];\n        }\n      });\n\n      postBody[fieldNameToSet].push(fieldValueWrapper);\n    });\n\n    postBody.type = [{\n      target_id: this.options.bundle,\n      target_type: `${this.options.entity}_type`\n    }];\n    return this.patch(identifier, postBody);\n  }\n}\n\nexport default Entity;\n","import methods from './helpers/methods';\n\nconst qs = require('qs');\n\nclass JSONAPI {\n  constructor(options, request) {\n    this.request = request;\n    this.jsonapiPrefix = options.jsonapiPrefix || 'jsonapi';\n  }\n\n  /**\n   * GET jsonapi\n   *\n   * @param {string} resource\n   *   The relative path to fetch from the API.\n   * @param {object} params\n   *   GET arguments to send with the request.\n   * @param {string} id\n   *   An ID of an individual item to request.\n   * @return {promise}\n   *   Resolves when the request is fulfilled, rejects if there's an error.\n */\n  get(resource, params, id = false) {\n    const format = 'api_json';\n    const url = `/${this.jsonapiPrefix}/${resource}${id ? `/${id}` : ''}?_format=${format}${Object.keys(params).length ? `&${qs.stringify(params, {indices: false})}` : ''}`;\n    return this.request.issueRequest(methods.get, url);\n  }\n\n  /**\n   * POST jsonapi\n   *\n   * @param {string} resource\n   *   The relative path to fetch from the API.\n   * @param  {object} body\n   *   JSON data sent to Drupal\n   * @return {promise}\n   *   Resolves when the request is fulfilled, rejects if there's an error.\n   */\n  post(resource, body) {\n    const format = 'api_json';\n    return this.request.issueRequest(\n      methods.post,\n      `/${this.jsonapiPrefix}/${resource}?_format=${format}`,\n      '',\n      {\n        'Content-Type': 'application/vnd.api+json'\n      },\n      body\n    );\n  }\n\n  /**\n   * PATCH jsonapi\n   *\n   * @param {string} resource\n   *   The relative path to fetch from the API.\n   * @param  {object} body\n   *   JSON data sent to Drupal\n   * @return {promise}\n   *   Resolves when the request is fulfilled, rejects if there's an error.\n   */\n  patch(resource, body) {\n    const format = 'api_json';\n    return this.request.issueRequest(\n      methods.patch,\n      `/${this.jsonapiPrefix}/${resource}?_format=${format}`,\n      '',\n      {\n        'Content-Type': 'application/vnd.api+json'\n      },\n      body\n    );\n  }\n\n  /**\n   * DELETE jsonapi\n   *\n   * @param {string} resource\n   *   The relative path to fetch from the API.\n   * @param {string} id\n   *   An ID of an individual item to delete.\n   * @return {promise}\n   *   Resolves when the request is fulfilled, rejects if there's an error.\n */\n  delete(resource, id) {\n    const format = 'api_json';\n    const url = `/${this.jsonapiPrefix}/${resource}/${id}?_format=${format}`;\n    return this.request.issueRequest(\n      methods.delete,\n      url,\n      '',\n      {\n        'Content-Type': 'application/vnd.api+json'\n      }\n    );\n  }\n\n}\n\nexport default JSONAPI;\n","class Swagger {\n  constructor(swaggerJSON) {\n    this.swagger = swaggerJSON;\n    this.entities = {};\n  }\n\n  collectEntities() {\n    Object.keys(this.swagger.paths).forEach(path => {\n      Object.keys(this.swagger.paths[path]).forEach(method => {\n        const entity = this.swagger.paths[path][method].tags[0];\n        const match = new RegExp(`${entity}\\:(.*)`);\n        const definitions = Object.keys(this.swagger.definitions).filter(element => match.test(element));\n        (definitions.length ? definitions : [entity]).forEach(bundle => {\n\n          const bundleData = this.swagger.definitions[bundle].hasOwnProperty('allOf') ?\n            this.swagger.definitions[bundle].allOf[1] :\n            this.swagger.definitions[bundle];\n\n          if (this.swagger.definitions[bundle].hasOwnProperty('allOf')) {\n            bundleData.properties = Object.assign(\n              bundleData.properties,\n              this.swagger.definitions[this.swagger.definitions[bundle].allOf[0].$ref.split('/').pop()].properties\n            );\n          }\n\n          // Only create an Object if we don't have one previously.\n          if (!this.entities.hasOwnProperty(bundle)) {\n            this.entities[bundle] = {};\n          }\n\n          // Create the methods key if this is the first time.\n          this.entities[bundle].methods = this.entities[bundle].methods ? this.entities[bundle].methods : {};\n          // Setup method information.\n          this.entities[bundle].methods[method] = {\n            path: path,\n            parameters: this.swagger.paths[path][method].parameters\n          };\n\n          // Setup bundle properties.\n          this.entities[bundle].properties = this.entities[bundle].properties ?\n            this.entities[bundle].properties :\n            bundleData.properties;\n\n          // Setup required fields.\n          this.entities[bundle].requiredFields = this.entities[bundle].requiredFields ?\n            this.entities[bundle].requiredFields :\n            bundleData.required;\n\n        });\n      });\n    });\n\n    return this.entities;\n  }\n}\n\nexport default Swagger;\n","import methods from './methods';\nconst axios = require('axios');\nconst qs = require('qs');\n\nclass OAuth {\n  constructor(basePath, OAuthOptions) {\n    this.basePath = basePath;\n    this.tokenInformation = Object.assign({}, OAuthOptions);\n    this.tokenInformation.grant_type = 'password'; // eslint-disable-line camelcase\n  }\n  /**\n   * Get an OAuth Token.\n   * @return {promise}\n   *   The resolved promise of fetching the oauth token.\n   */\n  getToken() {\n    const currentTime = new Date().getTime();\n    // Resolve if token already exists and is fresh\n    if (this.tokenInformation.access_token && (\n      this.hasOwnProperty('tokenExpireTime') &&\n      this.tokenExpireTime > currentTime\n    )) {\n      return Promise.resolve();\n    }\n    // If token is already being fetched, use that one.\n    else if (this.bearerPromise) {\n      return this.bearerPromise;\n    }\n    // If token has already been fetched switch grant_type to refresh_token.\n    else if (this.tokenInformation.access_token) {\n      this.tokenInformation.grant_type = 'refresh_token'; // eslint-disable-line camelcase\n    }\n\n    this.bearerPromise = axios({\n      method: methods.post,\n      url: `${this.basePath}/oauth/token`,\n      data: qs.stringify(this.tokenInformation)\n    })\n    .then(response => {\n      delete this.bearerPromise;\n      let t = new Date();\n      t.setSeconds(+t.getSeconds() + response.data.expires_in);\n      this.tokenExpireTime = t.getTime();\n      Object.assign(this.tokenInformation, response.data);\n      return response.data;\n    })\n    .catch(e => {\n      delete this.bearerPromise;\n      return Promise.reject(e);\n    });\n\n    return this.bearerPromise;\n  }\n}\n\nexport default OAuth;\n","import Base from './helpers/base';\n\nimport Request from './helpers/request';\nimport Entity from './entity';\nimport JSONAPI from './jsonapi';\nimport Swagger from './swagger';\nimport OAuth from './helpers/oauth';\n\nimport methods from './helpers/methods';\n\nclass Waterwheel extends Base {\n  /**\n   * Create an instance of the Waterwheel class.\n   * @param {object} options\n   *   The configuration used to create a new instance of Waterwheel.\n   * @param {string} options.base\n   *   The base URL.\n   * @param {object} options.oauth\n   *   The credentials used with each request.\n   * @param {string} options.oauth.grant_type\n   *   The type of grant you are requesting.\n   * @param {string} options.oauth.client_id\n   *   The ID of the OAuth Client.\n   * @param {string} options.oauth.client_secret\n   *   The secret set when the Client was created.\n   * @param {string} options.oauth.username\n   *   The resource owner username.\n   * @param {string} options.oauth.password\n   *   The resource owner password.\n   * @param {string} options.oauth.scope\n   *   The scope of the access request.\n   * @param {string} options.timeout\n   *   How long AXIOS should wait before bailing on a request.\n   * @param {string} options.jsonapiPrefix\n   *   If you have overridden the JSON API prefix, specify it here and Waterwheel\n   *   will use this over the default of 'jsonapi'.\n   * @param {boolean} options.validation\n   *   Should the request use oauth validation or expect anonymous access.\n   */\n  constructor(options) {\n    super(options);\n    this.api = {};\n\n    this.oauth = new OAuth(this.options.base, this.options.oauth);\n    this.request = new Request(options, this.oauth);\n\n    this.jsonapi = new JSONAPI(options, this.request);\n\n    if (this.options.resources && Object.keys(this.options.resources).length) {\n      this.parseSwagger(this.options.resources, this.request);\n    }\n  }\n\n  /**\n   * Parse a Swagger compatible document and create Waterwheel entities.\n   * @param {object} swaggerResources\n   *   A JSON object representing your API in Swagger format.\n   * @param {object} request\n   *   A shared requestor class instance.\n   * @param {object} credentials\n   *   A credentials object for making requests.\n   */\n  parseSwagger(swaggerResources, request) {\n    let swagger = new Swagger(swaggerResources).collectEntities();\n\n    Object.keys(swagger).forEach(entity => {\n      let methods = {};\n      Object.keys(swagger[entity].methods).forEach(method => {\n        methods[method] = {\n          path: swagger[entity].methods[method].path\n        };\n      });\n      this.api[entity] = new Entity({\n        base: this.options.base,\n        methods: methods,\n        bundle: entity.indexOf(':') > -1 ? entity.split(':')[1] : entity,\n        entity: entity.indexOf(':') > -1 ? entity.split(':')[0] : entity,\n        metadata: {\n          requiredFields: swagger[entity].requiredFields,\n          properties: swagger[entity].properties\n        }\n      }, request);\n    });\n  }\n\n  /**\n   * Return an array of resources currently active in Waterwheel.\n   * @return {array}\n   *   The resources currently active in Waterwheel.\n   */\n  getAvailableResources(){\n    // Sort everything for readability.\n    return Object.keys(this.api).sort();\n  }\n\n  /**\n   * Populate Waterwheel.api with available resources from a Swagger endpoint.\n   * @param {string} resourcesLocation\n   *   The full HTTP path for your swagger resources.\n   * @return {Promise}\n   *   A completed promise after the requested resources were added.\n   */\n  populateResources(resourcesLocation) {\n    return this.request.issueRequest(methods.get, resourcesLocation, false, {}, false, false)\n      .then(res => {\n        this.parseSwagger(res, this.request);\n      });\n  }\n\n  /**\n   * Fetch embedded resources from HAL+JSON documents\n   * @param  {object} entityJSON\n   *   An object, usually returned from Drupal, containing _embedded information\n   * @param {string|array} [includedFields]\n   *  If specified, a series of embedded resources to fetch.\n   * @return {Promise}\n   *   If no _embedded key is found, a rejection is returned, else a resolved\n   *   promise with all the embedded resources requests completed.\n   */\n  fetchEmbedded(entityJSON, includedFields) {\n    if (!entityJSON || !entityJSON.hasOwnProperty('_embedded')) {\n      return Promise.reject('This is probably not HAL+JSON');\n    }\n\n    const fieldsToFilterBy = includedFields ?\n      (Array.isArray(includedFields) ? includedFields : [includedFields]) : false;\n\n    const embeddedResources = entityJSON._embedded;\n    const embeddedResourcesKeys = Object.keys(embeddedResources);\n\n    let links = [];\n\n    (fieldsToFilterBy ?\n      embeddedResourcesKeys.filter(key => fieldsToFilterBy.indexOf(key.split('/').pop()) !== -1) :\n      embeddedResourcesKeys\n    ).forEach(key => {\n      embeddedResources[key].forEach(ref => {\n        links.push(ref._links.self.href.split(this.options.base)[1]);\n      });\n    });\n\n    // Create a Set from the possibly-duplicate links array.\n    // Get an array from that set.\n    links = Array.from(new Set(links));\n\n    // Promise.all accepts an array of promises to resolve. The first item\n    // in this array is the original entity, adjacent to the embedded ones.\n    return Promise.all([Promise.resolve(entityJSON)].concat(links.map(link => this.request.issueRequest(methods.get, link))));\n  }\n\n}\n\nexport default Waterwheel;\n"],"names":["Base","options","Object","assign","base","Request","oauth","axios","require","method","url","XCSRFToken","additionalHeaders","body","baseOverride","accessCheck","validation","getToken","Promise","resolve","then","timeout","charAt","slice","headers","Authorization","tokenInformation","access_token","methods","get","keys","length","forEach","key","data","res","catch","error","Error","err","message","indexOf","status","response","reject","csrfToken","Entity","request","identifier","format","hasOwnProperty","issueRequest","path","replace","match","patch","getXCSRFToken","skipFieldValidation","post","checkedFields","checkRequiredFields","join","delete","availableBodyKeys","metadata","requiredFields","filter","includes","fields","availableFieldKeys","properties","nonMatchedFields","map","fieldKey","Boolean","bundle","postBody","fieldSpec","fieldNameToSet","fieldValueWrapper","items","prop","push","type","entity","qs","JSONAPI","jsonapiPrefix","resource","params","id","stringify","indices","Swagger","swaggerJSON","swagger","entities","paths","tags","RegExp","definitions","test","element","bundleData","allOf","$ref","split","pop","parameters","required","OAuth","basePath","OAuthOptions","grant_type","currentTime","Date","getTime","tokenExpireTime","bearerPromise","t","setSeconds","getSeconds","expires_in","e","Waterwheel","api","jsonapi","resources","parseSwagger","swaggerResources","collectEntities","sort","resourcesLocation","entityJSON","includedFields","fieldsToFilterBy","Array","isArray","embeddedResources","_embedded","embeddedResourcesKeys","links","ref","_links","self","href","from","Set","all","concat","link"],"mappings":"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"}